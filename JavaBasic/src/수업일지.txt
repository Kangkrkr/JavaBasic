
[이클립스 단축키]

패키지에서 ctrl + N -> 새프로젝트 생성
Alt+Shift+S -> 소스메뉴를 띄운다
Ctrl+Shift+O -> 자동 import
Shift + F2 -> 클래스에 마우스커서를 두고 사용하면 해당클래스의 메뉴얼을 웹페이지로 보여준다.
Ctrl+해당메소드 클릭 : 메소드정의 지점으로 간다.
Alt + Shift + A : 열편집모드
Alt + Shift + S : 소스메뉴 활성화

---------------------------------------------------------------------------------------------------------------------------------

[세이브시 자동 임포트]

Window->Preferences->Java->Editor->Sava Actions->Perform the selected actions on save 체크

---------------------------------------------------------------------------------------------------------------------------------

[자바API 메뉴얼 보는법]

1. 오라클 접속
2. Support 메뉴로 들어가기
3. Product Documentation 탭
4. JAVA 탭 클릭
5. JAVA SE 에서 SE Documentation 클릭
6. Reference 클릭

---------------------------------------------------------------------------------------------------------------------------------

[클래스다이어그램 플러그인]

help -> install new software -> add
name : 아무거나
url : http://www.objectaid.com/update
classdiagram 하나만 체크하고 설치.
패키지 -> 마우스우클릭 -> Objectaid UML diagram
-> 적당한 네이밍 -> finish

---------------------------------------------------------------------------------------------------------------------------------

[ERMaster 플러그인]

http://ermaster.sourceforge.net/update-ste

---------------------------------------------------------------------------------------------------------------------------------

[유니코드를 한글로 변환해주는 플러그인]

http://propedit.sourceforge.jp/eclipse/updates

---------------------------------------------------------------------------------------------------------------------------------

[업캐스팅] : 부모클래스 타입의 객체에 자식클래스 객체를 대입할떄.

---------------------------------------------------------------------------------------------------------------------------------

int score[] = new int[3] 시 해당 배열변수는
힙에 저장이 되고, 스택에는 score[0], [1], [2]가
저장이 된다. score[0] = 100; 을 하게되면
스택의 score[0] 이 힙의 score[] 변수를 가리키게된다

---------------------------------------------------------------------------------------------------------------------------------

[프로퍼티 클래스를 사용한 클래스 가져오기 - loose coupling]

프로퍼티 파일에 해당 키와 값을 준다 -> tv=_loose_coupling_.SamsungTV

Properties pr = new Properties();
InputStream is = new FileInputStream("src/_loose_coupling_/product.properties");
pr.load(is);

String className = pr.getProperty("tv");
Class clazz = Class.forName(className);

TV tv = (TV)clazz.newInstance();
tv.powerOn();
tv.soundUp();

---------------------------------------------------------------------------------------------------------------------------------

[try - catch]

예외를 캐치시에는 자식예외가 부모예외보다 더위의 블록위치에 있어야한다.
왜냐면 부모예외가 위에 있으면, 자식예외까지 전달이 되지 않기 때문이다.

---------------------------------------------------------------------------------------------------------------------------------

[2016 - 01 - 06 클래스를 라이브러리로 만들어 사용하기]

---------------------------------------------------------------------------------------------------------------------------------

[2016 - 01 - 07 클래스 객체의 배열]

MemberVO members[] = {
		new MemberVO("kangkrkr", "강승윤", "P"),
		new MemberVO("swback", "백승욱", "W"),
		new MemberVO("ydkim", "김영두", "D")
};

[클래스 네임과 해쉬코드]
package _api_;

public class ObjectTest {
	public static void main(String[] args) {
		CalendarTest ct = new CalendarTest();
		System.out.println(ct.toString());
		System.out.println(ct.getClass());
		System.out.println(ct.hashCode());
	}
}

결과 -----> 	_api_.CalendarTest@6c0267a
			class _api_.CalendarTest
			113256058

			hashCode 값을 16진수로 나타내면 6c0267a 이다.
---------------------------------------------------------------------------------------------------------------------------------

[2016 - 01 - 08]

public class StringTokenizerTest {

	public static void main(String[] args) {

		// 여러개의 delim을 줄 경우에는 해당 delim을 모두 인식하여 문자열을 잘라낸다.
		StringTokenizer st = new StringTokenizer("강백호|정대만,서태웅|송태섭,채치수|김준호", "|,");
		
		while(st.hasMoreTokens()){
			System.out.println(st.nextToken());
		}
		
		/*	강백호
			정대만
			서태웅
			송태섭
			채치수
			김준호*/
	}
}

CR : 문자열의 제일 앞으로 가는것.
LF : 라인을 한줄 내리는 것.

운영체제 별로 \n 혹은 \r 을 사용하는 경우가 있다.


arrayList.set(index, data);
-> index 번호의 아이템을 data로 바꾼다.

---------------------------------------------------------------------------------------------------------------------------------

[2016 - 01 - 11 오라클 DBMS]

primary key (PK)  ---> NOT NULL & UNIQUE 해야함.
foreign key (FK)  ---> 외부 테이블의 primary key를 의미.
check		(CK)
not null	(NN)
UNIQUE			  ---> 중복이 허용되지 않는값. NULL이 될수 있다.

[프로젝션 : 원하는 열만 가져온다.
셀렉션 : 원하는 레코드만 가져온다.]

[sql 사용시에는 성능, 관리를 위해서는 대소문자를 가려 기입해야 한다.]
[오라클에서는 문자열 사용시에는 싱글쿼테이션(')을 사용한다.]

[오라클에서는 다음과 같이 산술식을 사용할 수 있다. 월급 salary 에 12를 곱하여 연봉을 구하는 과정. ( + - * / )
연산자 우선순위의 적용을 위해 (, ) 등의 괄호를 사용할 수도 있다.]
select last_name, salary * 12
from employees;

[select 문도 데이터 조작문에 속하는 이유는 사용자가 원하는 집합을 오라클서버에게 묘사,요청하는 언어이기 때문이다.]

[오라클의 NULL은 '알수없음'을 의미. 일반 비교연산자로는 비교를 할 수 없다. is null 과 같이, is 키워드를 사용하여 비교한다.]

[연봉 = salary * 12 + salary * 12 * commission_pct
확정된 NULL 은 0이 되게 하는 것이 맞으며, 여기의 데이터모델링은 잘못된 예를 보여주기 위해 NULL로 설정한 것이다.
NULL을 0으로 바꿔주는 함수가 있다 ---> nvl(commission_pct, 0) 사실, 사용하는 것을 권장하지는 않는다.]
SELECT last_name, (salary * 12 + (salary * 12 * nvl(commission_pct, 0)))
FROM employees;


[열에 별칭(헤딩) 붙이기 AS "..."]
/* 대문자를 구분하고 싶거나 공백을 넣고 싶을때는 " "를 사용하면 된다 */
/* AS는 굳이 붙이지 않아도 된다. */
/* 주로 권장되는 방법은 다음과 같다. */
SELECT last_name AS "Name", salary AS "Annual salary"
FROM employees;


[연결 연산자 || ]
SELECT last_name || '의 급여는 ' || salary || ' 입니다. '
AS "Employees"
FROM employees;


[컬럼 내 중복제거 - DISTINCT 혹은 UNIQUE]
SELECT DISTINCT department_id
FROM employees;

/* 사원이 소속된 부서별 업무 출력 */
SELECT DISTINCT department_id, job_id
FROM employees;


/* 비교 연산시 주의점 */
/* 조건이 NULL 인것은 비교가 되지 않는다 */
SELECT last_name
FROM employees
WHERE department_id <> 50;


[ 다중 비교키워드 BETWEEN 또는 AND ]
SELECT last_name, salary
FROM employees
WHERE 2500 <= salary AND salary <= 3500;

또는 다음과 같이 사용할 수도 있다.

SELECT last_name, salary
FROM employees
WHERE salary between 2500 AND 3500;


[ IN 키워드 - 값이 목록에 있는지 확인할 수 있다. ]
SELECT employee_id, last_name, salary, manager_id
FROM employees
WHERE manager_id = 100 OR
      manager_id = 101 OR
      manager_id = 201;

다음과 같이 'IN 키워드'를 사용하면 간단명료하다.

SELECT employee_id, last_name, salary, manager_id
FROM employees
WHERE manager_id IN (100, 101, 201);


[ LIKE 키워드 ]

첫글자가 'S'인 결과물을 찾는다.

SELECT first_name
FROM employees
WHERE first_name LIKE 'S%';

다음은 두번째 위치의 문자가 'o'인 결과물을 찾는다.

SELECT last_name
FROM employees
WHERE last_name LIKE '_o%';


[ ESCAPE 키워드  - 이스케이프 문자를 지정 ]

'_SA' 를 포함하는 문자열을 검색하는 경우.

SELECT employee_id, last_name, job_id
FROM employees
WHERE job_id LIKE '%SA\_%' ESCAPE '\';



---------------------------------------------------------------------------------------------------------------------------------